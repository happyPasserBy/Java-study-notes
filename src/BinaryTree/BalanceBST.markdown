# 平衡二叉树
## 1.什么是平衡二叉树
* 对于任意一个节点，左子树和右子树的高度相差不能超过1  
* 树的高度和节点数量的关系是O(longn)
* 每个节点都拥有高度(叶子节点为1，非叶子节点为左右子树最大值+1)
* 每个节点都拥有平衡因子(叶子节点为0，非叶子节点为左子树高度-右子树高度)
## 2. 破坏平衡性的四种状况
* 新插入的节点在左子树并且属于左叶子节点
* 新插入的节点在左子树并且属于右叶子节点
* 新插入的节点在右子树并且属于右叶子节点
* 新插入的节点在右子树并且属于左叶子节点
## 3. 维护平衡性的操作
### 3.1 右旋转(对应处理破坏平衡性的四种状况第一条)
* 暂时移除x节点的右子树T3节点
* 让失衡点y变为x的右子树
* 设置T3节点为y节点的左子树
![](./images/AVL_2.png)
![](./images/AVL_3.png)
### 3.2 左旋转(对应处理破坏平衡性的四种状况第三条)
* 暂时移除x节点的左子树T3节点
* 让失衡点y变为x的左子树
* 设置T3节点为y节点的右子树
![](./images/AVL_4.png)
![](./images/AVL_5.png)
### 3.3 先左后右旋转
### 3.4 先右后左旋转

![](./images/AVL_1.png)

## 参考
1. https://coding.imooc.com/class/207.html
2. https://www.cnblogs.com/qm-article/p/9349681.html
3. https://blog.csdn.net/javazejian/article/details/53892797
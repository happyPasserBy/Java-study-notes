public class MyAVL<E extends Comparable<E>, V> {

    private Node root;
    private int size;

    public MyAVL() {
        this.root = null;
        this.size = 0;
    }


    @Data
    private class Node {
        private Node left;
        private Node right;
        private E key;
        private V value;
        private int height;

        public Node() {
            this.left = null;
            this.right = null;
            this.key = null;
            this.value = null;
            this.height = 1;
        }

        public Node(E key, V value) {
            this.key = key;
            this.value = value;
            this.left = null;
            this.right = null;
            this.height = 1;
        }

        @Override
        public String toString() {
            return this.key.toString();
        }
    }

    public int size() {
        return this.size;
    }

    // 先序遍历
    public void preOrder() {
        this.preOrder(this.root);
    }

    private void preOrder(Node node) {
        if (node == null) return;
        System.out.println(node);
        preOrder(node.left);
        preOrder(node.right);
    }

    // 中序遍历
    public void inOrder() {
        this.inOrder(this.root);
    }

    private void inOrder(Node node) {
        if (node == null) return;
        this.inOrder(node.left);
        System.out.println(node);
        this.inOrder(node.right);
    }

    // 后序遍历
    public void postOrder() {
        this.inOrder(this.root);
    }

    private void postOrder(Node node) {
        if (node == null) return;
        this.inOrder(node.left);
        this.inOrder(node.right);
        System.out.println(node);
    }

    // 层序遍历
    public void levelOrder() {
        // 待实现
    }

    // 最大值
    public E max() {
        return this.max(this.root);
    }

    private E max(Node node) {
        if (node == null) return null;
        if (node.right == null) return node.key;
        return this.max(node.right);
    }

    // 最小值
    public E min() {
        return this.min(this.root);
    }

    private E min(Node node) {
        if (node == null) return null;
        if (node.left == null) return node.key;
        return this.min(node.left);
    }

    // 是否包含指定值
    public boolean contains(E e) {
        return this.contains(e, this.root);
    }

    private boolean contains(E e, Node node) {
        if (node == null) return false;
        if (e.compareTo(node.key) > 0) {
            return this.contains(e, node.right);
        } else if (e.compareTo(node.key) < 0) {
            return this.contains(e, node.left);
        }
        return true;
    }

    // 计算平衡因子
    private int getBalanceFactor(Node node) {
        if ((node.left == null && node.right == null) || node == null) return 0;
        if (node.left != null && node.right != null) {
            return node.left.height - node.right.height;
        }
        if (node.left == null) {
            return 0 - node.right.height;
        }
        return node.left.height;
    }

    // 计算平衡因子
    private int getHeight(Node node) {
        if (node.left != null && node.right != null) {
            return Math.max(node.left.height, node.right.height) + 1;
        }
        if (node.left == null && node.right != null) {
            return node.right.height + 1;
        }
        if (node.right == null && node.left != null) {
            return node.left.height + 1;
        }
        return 1;

    }


    // 右旋转
    private Node leftRotate(Node node) {
        Node rightChildNode = node.right;
        Node leftChildNode = rightChildNode.left;
        node.right = leftChildNode;
        rightChildNode.left = node;
        node.height = getHeight(node);
        rightChildNode.height = getHeight(rightChildNode);
        return rightChildNode;
    }

    // 左旋转
    private Node rightRotate(Node node) {
        Node leftChildNode = node.left;
        Node rightChildNode = leftChildNode.right;
        node.left = rightChildNode;
        leftChildNode.right = node;
        node.height = getHeight(node);
        leftChildNode.height = getHeight(leftChildNode);
        return leftChildNode;
    }

    // 添加
    public void add(E e, V value) {
        if (this.root == null) {
            this.root = new Node(e, value);
            this.size++;
        } else {
            this.root = this.add(e, value, this.root);
        }
    }

    private Node add(E e, V value, Node node) {
        if (node == null) {
            this.size++;
            return new Node(e, value);
        }
        if (e.compareTo(node.key) > 0) {
            node.right = this.add(e, value, node.right);
        } else if (e.compareTo(node.key) < 0) {
            node.left = this.add(e, value, node.left);
        }

        node.height = getHeight(node);

        int balanceFactor = this.getBalanceFactor(node);
        if (balanceFactor > 1 && this.getBalanceFactor(node.left) >= 0) {
            node = this.rightRotate(node);
            return node;
        }
        if (balanceFactor < -1 && this.getBalanceFactor(node.right) <= 0) {
            node = this.leftRotate(node);
            return node;
        }

        if (balanceFactor > 1 && this.getBalanceFactor(node.left) <= -1) {
            node.left = this.leftRotate(node.left);
            node = this.rightRotate(node);
            return node;
        }

        if (balanceFactor < -1 && this.getBalanceFactor(node.right) >= 1) {
            node.right = this.rightRotate(node.right);
            node = this.leftRotate(node);
            return node;
        }
        return node;
    }

    // 判断该二叉树是否是一棵平衡二叉树
    // todo 待删除 ----- ↓
    public boolean isBalanced() {
        return isBalanced(root);
    }

    // 判断以Node为根的二叉树是否是一棵平衡二叉树，递归算法
    private boolean isBalanced(Node node) {

        if (node == null)
            return true;

        int balanceFactor = getBalanceFactor(node);
        if (Math.abs(balanceFactor) > 1)
            return false;
        return isBalanced(node.left) && isBalanced(node.right);
    }

    // 判断该二叉树是否是一棵二分搜索树
    public boolean isBST() {
        ArrayList<E> keys = new ArrayList<>();
        inOrder(root, keys);
        for (int i = 1; i < keys.size(); i++)
            if (keys.get(i - 1).compareTo(keys.get(i)) > 0)
                return false;
        return true;
    }

    private void inOrder(Node node, ArrayList<E> keys) {

        if (node == null)
            return;

        inOrder(node.left, keys);
        keys.add(node.key);
        inOrder(node.right, keys);
    }

    // 返回以node为根节点的二分搜索树中，key所在的节点
    private Node getNode(Node node, E key) {

        if (node == null)
            return null;

        if (key.equals(node.key))
            return node;
        else if (key.compareTo(node.key) < 0)
            return getNode(node.left, key);
        else // if(key.compareTo(node.key) > 0)
            return getNode(node.right, key);
    }

    public V get(E key) {

        Node node = getNode(root, key);
        return node == null ? null : node.value;
    }

    public void set(E key, V newValue) {
        Node node = getNode(root, key);
        if (node == null)
            throw new IllegalArgumentException(key + " doesn't exist!");

        node.value = newValue;
    }
    // todo 待删除 -----↑

    // 删除最小值
    public E removeMin() {
        E e = this.min(this.root);
        this.root = this.removeMin(this.root);
        return e;
    }

    private Node removeMin(Node node) {
        if (node == null) return null;
        if (node.left != null) {
            node.left = this.removeMin(node.left);
            this.size--;
            return node;
        }
        if (node.right != null) {
            node = node.right;
            this.size--;
            return node;
        }
        return null;
    }

    // 删除最大值
    public E removeMax() {
        E e = this.max(this.root);
        this.root = this.removeMax(this.root);
        return e;
    }

    private Node removeMax(Node node) {
        if (node == null) return null;
        if (node.right != null) {
            node.right = this.removeMax(node.right);
            this.size--;
            return node;
        }
        if (node.left != null) {
            node = node.left;
            this.size--;
            return node;
        }
        return null;
    }

    // 删除指定值
    public boolean remove(E e) {
        int oldSize = this.size();
        this.remove(e, this.root);
        int newSize = this.size();
        return oldSize > newSize;
    }

    private Node remove(E e, Node node) {
        if (node == null) return null;
        Node result;
        if (e.compareTo(node.key) > 0) {
            node.right = this.remove(e, node.right);
            result = node;
        } else if (e.compareTo(node.key) < 0) {
            node.left = this.remove(e, node.left);
            result = node;
        } else {
            this.size--;
            if (node.left != null && node.right != null) {
                //todo 暂不支持修改value 改为删除返回Node
                E maxKey = this.min(node.right);
                node.right = this.remove(maxKey,node.right);
                node.key = maxKey;
                // node.value = maxNode.value;//待不支持修改value

            } else if (node.left != null) {
                Node leftNdoe = node.left;
                node = leftNdoe;
            } else if (node.right != null) {
                Node rightNdoe = node.right;
                node = rightNdoe;
            } else {
                return null;
            }
            result = node;
        }

        result.height = getHeight(result);

        int balanceFactor = this.getBalanceFactor(result);
        if (balanceFactor > 1 && this.getBalanceFactor(result.left) >= 0) {
            result = this.rightRotate(result);
            return result;
        }
        if (balanceFactor < -1 && this.getBalanceFactor(result.right) <= 0) {
            result = this.leftRotate(result);
            return result;
        }

        if (balanceFactor > 1 && this.getBalanceFactor(result.left) <= -1) {
            result.left = this.leftRotate(result.left);
            result = this.rightRotate(result);
            return result;
        }

        if (balanceFactor < -1 && this.getBalanceFactor(result.right) >= 1) {
            result.right = this.rightRotate(result.right);
            result = this.leftRotate(result);
            return result;
        }
        return result;
    }
}


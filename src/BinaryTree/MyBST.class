public class MyBST<E extends Comparable<E>> {

    private Node root;
    private int size;

    public MyBST() {
        this.root = null;
        this.size = 0;
    }


    @Data
    private class Node {
        private Node left;
        private Node right;
        private E key;

        public Node() {
            this.left = null;
            this.right = null;
            this.key = null;
        }

        public Node(E key) {
            this.key = key;
            this.left = null;
            this.right = null;
        }
        @Override
        public String toString(){
            return this.key.toString();
        }
    }
    public int size(){
        return this.size;
    }

    // 先序遍历
    public void preOrder() {
        this.preOrder(this.root);
    }

    private void preOrder(Node node) {
        if (node == null) return;
        System.out.println(node);
        preOrder(node.left);
        preOrder(node.right);
    }

    // 中序遍历
    public void inOrder() {
        this.inOrder(this.root);
    }

    private void inOrder(Node node) {
        if (node == null) return;
        this.inOrder(node.left);
        System.out.println(node);
        this.inOrder(node.right);
    }

    // 后序遍历
    public void postOrder() {
        this.inOrder(this.root);
    }

    private void postOrder(Node node) {
        if (node == null) return;
        this.inOrder(node.left);
        this.inOrder(node.right);
        System.out.println(node);
    }

    // 层序遍历
    public void levelOrder(){
        // 待实现
    }

    // 最大值
    public E max() {
        return this.max(this.root);
    }

    private E max(Node node) {
        if (node == null) return null;
        if (node.right == null) return node.key;
        return this.max(node.right);
    }

    // 最小值
    public E min() {
        return this.min(this.root);
    }

    private E min(Node node) {
        if (node == null) return null;
        if (node.left == null) return node.key;
        return this.min(node.left);
    }

    // 是否包含指定值
    public boolean contains(E e) {
        return this.contains(e, this.root);
    }

    private boolean contains(E e, Node node) {
        if (node == null) return false;
        if (e.compareTo(node.key) > 0) {
            return this.contains(e, node.right);
        } else if (e.compareTo(node.key) < 0) {
            return this.contains(e, node.left);
        }
        return true;
    }

    // 添加
    public void add(E e) {
        if(this.root == null) {
            this.root = new Node(e);
        }else {
            this.add(e,this.root);
        }
    }
    private Node add(E e,Node node) {
        if(node == null) {
            this.size++;
            return new Node(e);
        }
        if(e.compareTo(node.key) > 0) {
            node.right = this.add(e,node.right);
        }else if(e.compareTo(node.key) < 0) {
            node.left = this.add(e,node.left);
        }
        return node;

    }

    // 删除最小值
    public E removeMin(){
        E e = this.min(this.root);
        this.root = this.removeMin(this.root);
        return e;
    }

    private Node  removeMin(Node node){
        if(node == null) return null;
        if(node.left != null) {
            node.left = this.removeMin(node.left);
            this.size--;
            return node;
        }
        if(node.right != null) {
            node = node.right;
            this.size--;
            return node;
        }
        return null;
    }

    // 删除最大值
    public E removeMax(){
        E e = this.max(this.root);
        this.root = this.removeMax(this.root);
        return e;
    }

    private Node  removeMax(Node node){
        if(node == null) return null;
        if(node.right != null) {
            node.right = this.removeMax(node.right);
            this.size--;
            return node;
        }
        if(node.left != null) {
            node = node.left;
            this.size--;
            return node;
        }
        return null;
    }

    // 删除指定值
    public boolean remove(E e){
        int oldSize = this.size();
        this.remove(e,this.root);
        int newSize = this.size();
        return oldSize > newSize;
    }

    private Node remove(E e,Node node) {
        if(node == null) return null;
        if(e.compareTo(node.key) > 0) {
            return node.right = this.remove(e,node.right);
        }else if(e.compareTo(node.key) < 0) {
            return node.left = this.remove(e,node.left);
        }

        if(node.left != null && node.right != null) {
            Node maxNode = this.removeMax(node.right);
            node.key = maxNode.key;
            this.size--;
        }
        if(node.left != null) {
            Node leftNdoe = node.left;
            node = leftNdoe;
            this.size--;
        }
        if(node.right != null) {
            Node rightNdoe = node.right;
            node = rightNdoe;
            this.size--;
        }

        return node;


    }
}
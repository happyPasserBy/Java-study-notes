# 代理模式
> 现实生活场景中代理模式随处可见，如委托链家租房，委托软件帮我们抢票等，
代理模式还是比较容易理解的，在代码中的体现就是我们访问代理类(如链家)，代理类扩展增强了被代理的对象(如房东)
## 静态代理
> 由开发人员自行编写代理类而后编译成clas文件
### 优点
* 简单易懂
### 缺点
* 当所要代理类的方法逐渐增加时，开发人员也要相应的增加大量重复代理相关的代码
### 实现
```java
// 抽象接口
public interface RentRoom {
	public void getRoom();
}
```
```java
// 被代理类
public class LandLord implements RentRoom{
	public void getRoom() {
		System.out.println("天安门边上有一间空房子");
	}
}
```
```java
// 代理类
public class LianJia implements RentRoom{
	private LandLord landLord = new LandLord(); 
	public void getRoom() {
		System.out.println("我需要中介费呦！");
		landLord.getRoom();
	}
}
```
```java
// 测试
public class Test {
	public static void main(String[] args) {
		LianJia  lj = new LianJia();
		lj.getRoom();
	}
}
```
## 动态代理
> 动态代理的意思是在Java程序运行时才确定或者说是创建代理类，Java默认提供了Proxy来支持动态代理，而动态代理的底层实现是用到了反射机制
## 优点
* 代理的所有方法都被集中到invoke方法里，方便管理
## 缺点
* 代理时需要用反射动态的加载类，效率会有所下降(不确定)
### 实现
```java
// 抽象接口
public interface RentRoom {
	public void getRoom();
}
```
```java
// 被代理类
public class LandLord implements RentRoom{
	public void getRoom() {
		System.out.println("天安门边上有一间空房子");
	}
}
```
```java
// 代理对象
public class Dynamic implements InvocationHandler{
	private Object target;
	public Dynamic(Object target) {
		this.target = target;
	}
	@Override
	public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
		System.out.println("invoke: 我想做些神马呢？");
        method.invoke(target,args);
        System.out.println("invoke: 还是收取点中介费吧");
		return null;
	}
}
```
```java
// 测试
public class Test {
	public static void main(String[] args) {
		LandLord landLord = new LandLord();
		Dynamic d = new Dynamic(landLord);
		RentRoom rentRoom = (RentRoom) Proxy.newProxyInstance(Test.class.getClassLoader(),landLord.getClass().getInterfaces() , d);
		rentRoom.getRoom();
		// 结果
		// invoke: 我想做些神马呢？
		// 天安门边上有一间空房子
		// invoke: 还是收取点中介费吧
	}
}
```
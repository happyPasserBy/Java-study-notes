# 单例模式
> 单例模式的作用是指程序中那些可以不用反复创建的对象仅被创建一次
## 饿汉模式
> 饿汉模式在类加载时创建实例，使用ClassLoader保证线程安全，缺点是会出现浪费内存的现象，也就是说此实例没有被用到
```java
public class Singleton{
    private static Singleton instance = new Singleton();
    private Singleton(){}
    public static Singleton getInstance(){
        return instance;
    }
}
```
## 懒汉模式
> 顾名思义，采用懒加载的方式加载实例,为了保障线程安全使用synchronized修饰获取实例的方法，但仍会引出另一个问题，效率较低
```java
public class Singleton{
    private static Singleton instance ;
    private Singleton(){}
    public static synchronized Singleton getInstance(){
        if(instance == null) {
            instance = new Singleton();
        }
        return instance;
    }
}
```
## 参考
1. https://blog.csdn.net/ns_code/article/details/17348313
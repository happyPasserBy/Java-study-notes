# 观察者模式
> 定义额了对象之间一对多依赖，让多个观察者对象同时监听某一个主题对象，当主题对象发生变化时，它的所有依赖者(观察者)都会收到通知并更新
## 1. 实现
### 1.1
```
@Data
public class Question {
    private String userName;
    private String questionContent;

    public Question(String userName, String questionContent) {
        this.userName = userName;
        this.questionContent = questionContent;
    }
}
```
### 1.2
```
@Data
public class Course extends Observable {
    private String courseName;

    public Course(String courseName) {
        this.courseName = courseName;
    }

    public void produceQuestion(Course course,Question question){
        System.out.println("生产消息");
        setChanged();
        notifyObservers(question);
    }
}
```
### 1.3
```
public class Teacher implements Observer {
    private String teacherName;

    public Teacher(String teacherName) {
        this.teacherName = teacherName;
    }

    @Override
    public void update(Observable o, Object arg) {
        System.out.println("观察到消息");
        System.out.println(arg);
    }
}
```
### 1.4
```
    @org.junit.Test
    public void test(){
        Course course = new Course("英语");
        Teacher teacher = new Teacher("lron");
        course.addObserver(teacher);
        course.produceQuestion(course,new Question("小明","完全不会"));

    }
```











# Mysql索引
## 什么是索引
> 每条数据的标识，可以通过标识快速定位到数据，如字典，索引由每条数据一列或多个列组合生成的键值，如mysql中的主键，唯一键，普通键等
## B-Tree(B树)
1. 为何是B树 
> 查询快的常用数据结构非二叉树莫属，二叉树的查找速度为O(logn),相当于二分查找,但二叉树也有它短板，当我们插入的数据为[1,2,3,4,5]时，
它的查询速度为O(n)相当于挨个遍历，对于数据库存储的场景，每次查询数据为一次IO,而IO操作是耗费系统资源的，如果使用二叉树来存储数据，则最坏的情况是IO的次数等于树的高度，而对于现在的数据存储情况
小则几百MB大则几十G，树的高度可想而知，进而我们引入B树，B树就是为磁盘或其它存储设备快速获取与存放数据而来
2. 什么是B树
> B树大家多叫它B-Tree，针对于磁盘存储优化而生的多路平衡查找树

![](B-Tree.png.png)
  * 根节点至少包括两个子节点
  * 树种每个节点最多含有m个孩子(m >= 2)
  * 除根节点和叶子结点外，其他每个节点至少有celi(m/2)个孩子
  * 所有叶子节点都位于统一层
  * 假设每个非终端节点种包含n个关键字信息，其中
    1. Ki(i=1...n)为关键字，且关键字按升序排序K(i-1) < Ki
    2. 非叶子结点关键字的个数n必须满足； [ceil(m/2)-1] <= n <= m-1,换句话说非叶子结点的就关键字(K)比指向孩子节点的指针少一个
    3. 非叶子节点的指针: P[1],P[2],....P[M];其中P[1]指向关键字小于K[1]的子树，P[M]指向的关键字大于K[M-1]的子树，其它P[I]指向关键字属于(K[i-1],K[i])的子树
## B+Tree(B+树)
![](B+Tree.png.png)
1. 优化后的B树:B+树是B树的变体，其特性与B树相同，除了:
  * 非叶子节点的子树指针与关键字个数相同
  * 非叶子节点的子树指针P[i],指向关键字[K[I],K[i+1]]的子树
  * 非叶子节点仅用来索引，数据都保存在叶子节点中
  * 所有叶子节点均有一个指针指向下一个叶子结点
2. B+树有哪些优化？
  * 所有数据存储在叶子节点，非叶子节点只存储索引因此体积更小，加载进内存的索引也就更多，IO次数相对于B树更少
  * 所有数据存储在叶子节点，因此查询性能稳定
  * 每个叶子节点都有指向下一个叶子结点的指针，所以范围查询更简单
## Hash索引(此点不太确定)
1. 什么是Hash索引
> 底层使用Hash表+链表的方式实现，通过Hash算法快读定位到所在的桶
1. Hash索引的缺点
    * 不等用于范围查询，经过Hash算法后数据的范围将不确定
    * 不能利用部分索引键查询
    ......
## 密集索引与稀疏索引
### 密集索引
> 
#### 密集索引的选取规则
* 若有主键则主键作为密集索引
* 若没有主键被定义。该表的第一个非空索引作为密集索引
* 若以上条件都不满足，则innodb内部会生成一个隐藏主键作为密集索引
## 最左匹配原则
* mysql会一直向右匹配直到遇到范围查询(>,<,between,like)就停止匹配，比如a=3 and b=4 and c>5 and d=6,如果索引的建立顺序是
(a,b,c,d)，则d不会用到索引，如果建立的顺序是(a,b,d,c)则都可以用到索引，a,b,d的顺序可以任意调整
* = 和 in 可以乱序，比如 a=1 and b=2 and c=3，(a,b,c)索引的建立可以任意顺序，mysql的查询优化器会优化成索引可以识别的形式 

## 常用索引
### UNIQUE 唯一索引
> 保证数据唯一性，null值可重复

```
// 与表一同创建
create table `tb_text`(
  `id` int(11) auto_increment,
  `name` varchar(20) not null,
  `age` tinyint default null,
  unique key `tname` (`name`),
  primary key (`id`)
) ENGINE = InnoDB CHARACTER SET = utf8
```
```
// 表创建后增加
create unique index `tname` on tb_text(`name`)
```
```
//删除索引
alter table `tb_text` drop index tname
```



.....未完待续
## 参考链接
1. https://www.zhihu.com/people/xiao-hui-68-47/posts?page=2
2. https://coding.imooc.com/learn/list/303.html
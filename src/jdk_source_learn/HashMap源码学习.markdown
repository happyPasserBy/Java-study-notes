# HashMap部分源码笔记
## 1.计算底层容器容量方法
> 该方法主要将创建HashMap时传入的初始化容量转为大于cap且是最接近cap的2的n次幂
```
static final int tableSizeFor(int cap) {
    int n = cap - 1;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    return (n < 0) ? 1 : (n >= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;
}

```

### 1.1 为什么是2的n次幂
* 效率高: 计算容器下标的操作就是key值 & 容器长度 取余的操作，但是使用&的操作效率高于%操作，而key.hashcode & (array.length - 1) = key.hashcode % array.length

* 扩容时方便定位: 当容器下标与hash & 的最高位结果为1时，当前元素下标 = 原下标 + 原容器长度，当最高位结果为0时，下标不变

```

// 假设容器长度 2^4 = 16,某个key(key1)的hash为101

1.先计算出key1的下标
0000 0000 0000 1111   2^4-1 
0000 1010 0101 0101   & key1
___________________

0000 0000 0000 0101   容器下标 0101 = 5
               |
             最高位

2.此时容器扩容为16*2 = 32，为保持hash落点均匀元素需重新计算下表

0000 0000 0001 1111   2^5-1 
0000 1010 0101 0101   & key1
___________________
0000 0000 0001 0101   容器下标 0001 0101 = 21
             |
           最高位


//21感觉有点奇怪，5(原下标)+16(原容器长度) = 21(现下标) 可能是巧合在试试

3.此时容器扩容为32*2 = 64

0000 0000 0011 1111   2^6-1 
0000 1010 0101 0101   & key1
___________________
0000 0000 0001 0101    容器下标 0001 0101 = 21 
            |
          最高位

// 没变！ 在扩容试下

4.此时容器扩容为64*2 = 128

0000 0000 0111 1111   2^7-1 
0000 1010 0101 0101   & key1
___________________
0000 0000 0101 0101    容器下标 0001 0101 = 85 
           |
        最高位

// (原下标)21+64(原容器长度) = 85(现下标) 发现规律没有，再次尝试

5.此时容器扩容为128*2 = 256

0000 0000 1111 1111   2^8-1 
0000 1010 0101 0101   & key1
___________________
0000 0000 0101 0101    容器下标 85没变
          |
        最高位

```


### 1.2 

* 假设tableSizeFor(211);
```
int n = cap - 1;       -1是防止cap本就是2的n次幂，-1后经过后续计算得到的还是数据本身


211二进制为 1101 0011
0000 0000 1101 0011    n |= n >>> 1;
0000 0000 0110 1001    | 操作
———————————————————
0000 0000 1111 1011    n |= n >>> 2;
0000 0000 0011 1110    | 操作 
———————————————————
0000 0000 1111 1111    n |= n >>> 4; 
0000 0000 0000 1111    | 操作
———————————————————
0000 0000 1111 1111    n |= n >>> 8; 
0000 0000 0000 0000    | 操作
———————————————————
0000 0000 1111 1111    n |= n >>> 16;
0000 0000 0000 0000    | 操作
———————————————————
0000 0000 1111 1111    结果 255

(n < 0) ? 1 : (n >= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1; 最后这步判断最关键的一句 n + 1

0000 0000 1111 1111  255
0000 0000 0000 0001  +1
———————————————————
0000 0001 0000 0000  = 256 = 2^8


```
### 1.3 总结：所有的位移与|都是为了将高位以下数据改为1(只要n>0必定有一位为1)，当所有位上的数据为1时，则+1以后得到的数必定大于cap且是最接近cap的2的n次幂

## 2.根据hash计算下标
> 该方法主要用过位移加^操作计算下表

```
static final int hash(Object key) {
    int h;
    return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);
}

```





## 参考
1. https://blog.csdn.net/huzhigenlaohu/article/details/51802457
2. https://juejin.im/post/5d51884ee51d4561e0516ac9
3. https://juejin.im/post/5d54300151882551d172f22d
4. https://www.zhihu.com/question/20733617/answer/32513376